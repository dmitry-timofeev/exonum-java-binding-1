<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.exonum.binding</groupId>
    <artifactId>exonum-java-binding-parent</artifactId>
    <version>0.6.0-SNAPSHOT</version>
  </parent>

  <artifactId>exonum-java-binding-packaging</artifactId>
  <version>0.6.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>Exonum Java Binding: Packaging</name>
  <description>A fake module used for packaging EJB App</description>

  <properties>
    <!--A directory used for storing immediate files while packaging the App-->
    <packaging.basedir>${project.parent.basedir}/core/rust/target/prepackage</packaging.basedir>
    <!--A directory containing Java dependencies of the App-->
    <packaging.rust>${project.parent.basedir}/core/rust</packaging.rust>
    <!--A directory containing native dynamic libraries used by the App-->
    <packaging.java>${project.parent.basedir}/core/rust/target/debug/lib/java</packaging.java>
  </properties>

  <dependencies>
    <dependency>
      <groupId>com.exonum.binding</groupId>
      <artifactId>exonum-java-binding-core</artifactId>
      <version>${project.version}</version>
      <type>pom</type>
    </dependency>

    <dependency>
      <groupId>com.exonum.binding</groupId>
      <artifactId>exonum-time-oracle</artifactId>
      <version>${project.version}</version>
      <type>pom</type>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin><!--Do not create Jar-->
        <!-- Review:
I see that it is required because this project uses 'jar' packaging, which
binds jar and install plugins by default. I'd add an issue to define a custom packaging
for our use-case and *not* abuse the 'jar' packaging.

It seems to be quite straightforward: https://stackoverflow.com/questions/1427722/how-do-i-create-a-new-packaging-type-for-maven
-->
        <artifactId>maven-jar-plugin</artifactId>
        <executions>
          <execution>
            <id>default-jar</id>
            <phase/>
          </execution>
        </executions>
      </plugin>

      <plugin><!--Do not install Jar-->
        <artifactId>maven-install-plugin</artifactId>
        <executions>
          <execution>
            <id>default-install</id>
            <phase/>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-dependency-plugin</artifactId>
        <configuration>
          <includeScope>runtime</includeScope>
        </configuration>
        <!--We need to explicitly copy EJB Core and Time Oracle JARs because we use `type=pom` dependencies-->
        <!--TODO: remove after ECR-3039-->
        <executions>
          <execution>
            <id>copy-core-and-time-oracle-jars</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <outputDirectory>${packaging.java}</outputDirectory>
              <artifactItems>
                <artifactItem>
                  <groupId>${project.groupId}</groupId>
                  <artifactId>exonum-java-binding-core</artifactId>
                  <version>${project.version}</version>
                </artifactItem>
                <artifactItem>
                  <groupId>${project.groupId}</groupId>
                  <artifactId>exonum-time-oracle</artifactId>
                  <version>${project.version}</version>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
          <!--We copy all Java dependencies needed by the App to the <ejb-app-location>/lib/java directory-->
          <execution>
            <id>copy-java-dependencies</id>
            <phase>prepare-package</phase>
            <goals>
              <!-- Review:
> Goal that copies the project dependencies from the repository to a defined location.

Why then we copy core and time-oracle explicitly above?
                  -->
                  <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${packaging.java}</outputDirectory>
              <overWriteReleases>true</overWriteReleases>
              <overWriteSnapshots>true</overWriteSnapshots>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>app-packaging</id>
      <build>
        <plugins>
          <!--Package EJB App with necessary libraries and documentation-->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-assembly-plugin</artifactId>
            <configuration>
              <descriptors>
                <descriptor>app_assembly.xml</descriptor>
              </descriptors>
            </configuration>
            <executions>
              <execution>
                <id>package-ejb-app</id>
                <phase>package</phase>
                <goals>
                  <goal>single</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
